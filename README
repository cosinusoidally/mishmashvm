mishmashvm - adding a self hosted C JIT compiler to a JavaScript VM

Unless otherwise indicated all code in this repo is (C) 2022-2023 Liam Wilson and
licensed under the LGPL v2.1 (a copy of which exists under tcc_src/COPYING).
This repo includes code from various other projects (the Tiny C Compiler,
Duktape, jsmpeg, glibc headers, etc) license info for those project are
included within this repo.

Current status: WIP, very rough kind of working poc.

Works on win32 and i386 Linux

How do we self host under a JS VM? I'm using the Tiny C Compiler (tcc) (which is
written in C). To compile the C compiler we need a C compiler, but all we have
is a JS VM (Mozilla's Spidermonkey). We need a C compiler written in JS.
Manually porting the Tiny C Compiler to JS would take a while so I used
Emscripten to compile it down to JS. But I didn't stop there, I then used the
generated compiler to create a native machine code version of itself, which I
then can load and use from JS (I've written an elf loader and linker in JS).

Bootstrapping
=============

Bootstrapping is quick (around 1 min on my very slow machine). All we need is an
i686 version of Spidermonkey 45 (any version greater than about 24 should work,
but for win32 you need to have a copy of msvcr120.dll which is bundled with 45).

There are no binaries in this repo (and none are needed to bootstrap). All you
need to bootstrap is the spidermonkey shell (instructions on how to get this
from the Mozilla site are further down this page).

./bootstrap.sh for Linux
./bootstrap.bat for win32 (works on Microsoft Windows and Wine)

Usage:

js -i mishmashvm.js

will will start the vm, and load the C JIT compiler. You can then run various
tests (the vm will print out instructions on how).

For examples of how to use the api have a look in the tests directory.

Before running the bootstrap commands you need Spidermonkey 45 (get binaries from
Mozilla) and SDL 1.2 binaries (not a hard requirment, but needed for some
demos).

Note the bootstrap actually compiles tcc 4 times. The first compile is using the
Emscripten compiled version of tcc. This is the slowest bit. The next 3 compiles
are a 3 stage bootstrap using the newly generated tcc binary. Once the bootstrap
is complete the Emscripten version of tcc is no longer needed (you can then use
the binary to bootstrap new versions). The 3 stage binary bootstrap process
takes a matter of seconds.

Getting Set up:
===============

Getting Spidermonkey:

I have a mirror: https://github.com/cosinusoidally/jsshell-binaries-mirror
(which includes Mozilla signatures you can check) or you can get the binaries
directly from Mozilla:

https://ftp.mozilla.org/pub/firefox/candidates/45.8.0esr-candidates/build2/jsshell-win32.zip
https://ftp.mozilla.org/pub/firefox/candidates/45.8.0esr-candidates/build2/jsshell-linux-i686.zip

SDL 1.2:
win32: https://www.libsdl.org/release/SDL-1.2.15-win32.zip
To be on the safe side I'd also do a virus scan on SDL, eg here are the results
(and SHA256 sum) from Virus Total:
https://www.virustotal.com/#/file/a28bbe38714ef7817b1c1e8082a48f391f15e4043402444b783952fca939edc1/detection).

Linux: I'd recommend using Ubuntu 18.04, just install through apt-get:
apt-get install libsdl1.2debian

win32 setup:
============

Note windows defender may slow things down significantly. Once it has scanned
the mishmashvm directory once, it's worth setting an exclusion for that
directory.

Create a jsshell directory side by side with your mishmashvm directory:

jsshell/
mishmashvm/

Extract jsshell-win32.zip and SDL-1.2.15-win32.zip into the jsshell directory.

Tip: Windows 10 actually ships bsdtar which weirdly allows you to extact zip
files. You can extract in powershell like this:

tar -xf foo.zip

You should end up with this:

Z:\home\foo\scratch>dir jsshell
Volume in drive Z has no label.
Volume Serial Number is 0000-0000

Directory of Z:\home\foo\scratch\jsshell

 1/30/2022   5:54 PM  <DIR>         .
 1/30/2022   5:52 PM  <DIR>         ..
  1/1/2010  12:00 AM    10,429,952  icudt56.dll
  1/1/2010  12:00 AM     1,392,128  icuin56.dll
  1/1/2010  12:00 AM       928,256  icuuc56.dll
  1/1/2010  12:00 AM     4,705,792  js.exe
  3/2/2017   8:50 PM     7,770,910  jsshell-win32.zip
  1/1/2010  12:00 AM       105,472  mozglue.dll
  1/1/2010  12:00 AM       455,328  msvcp120.dll
  1/1/2010  12:00 AM       970,912  msvcr120.dll
  1/1/2010  12:00 AM     1,697,280  nss3.dll
 7/20/2007   7:25 AM           438  README-SDL.txt
 1/15/2012   4:49 PM       303,616  SDL.dll
 8/17/2013   3:59 AM       139,948  SDL-1.2.15-win32.zip
      12 files               28,900,032 bytes
       2 directories     11,151,065,088 bytes free

cd into your mishmashvm folder

and then run bootstrap.bat

It will print a load of stuff to the command line as it works. Once all is done
you should see the following:

0e8e02c852a11ebec585650d3c6fa5917fb51d7b66dd1d458d3e51680c660964 my_libc.o
no such file: my_libc.o.new
0cdb519efb42f22eba96bf90407e10b87868355e1d793d3a70271f09d47aa403 stubs.o
no such file: stubs.o.new
59483d03266a9eadb84ceafaf4ed8a37e5a5231aaf773f296a7ca097679307b3 tcc_bin/libtcc1.o
59483d03266a9eadb84ceafaf4ed8a37e5a5231aaf773f296a7ca097679307b3 tcc_bin/libtcc1.o.new
9a9d8861ec0c93a219abb8587770a04a5314ce332187c9631f37a3b7bbde6469 tcc_bin/tcc_boot3.o
9a9d8861ec0c93a219abb8587770a04a5314ce332187c9631f37a3b7bbde6469 tcc_bin/tcc_boot3.o.new


my_libc.o is some wrapper code to provide win32/Linux libc compatibility
stubs.o provides a bunch of dummy symbols to the elf loader

tcc_bin/tcc_boot3.o is the Tiny C Compiler
tcc_bin/libtcc1.o is a support library for tcc

Linux Setup:
============

As noted earlier you need to have a 32 bit x86 linux env (either just with the
32 bit support libs or a i386 chroot).

The method I used was to set up a Ubuntu Bionic i386 chroot plus SDL 1.2:

sudo debootstrap --arch=i386 --variant=minbase bionic bionic_min
cd bionic_min
edit etc/apt/sources.list :

deb http://archive.ubuntu.com/ubuntu bionic main
deb http://security.ubuntu.com/ubuntu bionic-security main

sudo chroot .
apt-get update
apt-get upgrade
apt-get install libsdl1.2debian

adduser foo

exit your chroot and then bind mount some required directories:

sudo mount --bind /dev/ dev/
sudo mount --bind /dev/shm/ dev/shm/
sudo mount --bind /dev/pts/ dev/pts/
sudo mount --bind /proc/ proc/

chroot back in again, and become the foo user:

sudo chroot .
su foo

In foo home directory create jsshell and mishmashvm

jsshell directory should look like this:

$ ls jsshell/
js  jsshell-linux-i686.zip  libnspr4.so  libplc4.so  libplds4.so

You need to add js to your PATH and its libs to LD_LIBRARY_PATH
cd jsshell
export PATH=$PWD:$PATH
export LD_LIBRARY_PATH=$PWD

Then check it works:

$ js
js> 1+2
3

change into your mishmashvm and then run ./bootstrap.sh

At the end, if that all went well, you should see:

0e8e02c852a11ebec585650d3c6fa5917fb51d7b66dd1d458d3e51680c660964 my_libc.o
no such file: my_libc.o.new
0cdb519efb42f22eba96bf90407e10b87868355e1d793d3a70271f09d47aa403 stubs.o
no such file: stubs.o.new
59483d03266a9eadb84ceafaf4ed8a37e5a5231aaf773f296a7ca097679307b3 tcc_bin/libtcc1.o
59483d03266a9eadb84ceafaf4ed8a37e5a5231aaf773f296a7ca097679307b3 tcc_bin/libtcc1.o.new
9a9d8861ec0c93a219abb8587770a04a5314ce332187c9631f37a3b7bbde6469 tcc_bin/tcc_boot3.o
9a9d8861ec0c93a219abb8587770a04a5314ce332187c9631f37a3b7bbde6469 tcc_bin/tcc_boot3.o.new

The eagle eyed may notice that the above sha256sums are the same as the
sha256sums on win32. That is because we are using exactly the same compiler on
both Linux and win32.
