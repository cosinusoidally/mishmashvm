load("tcc_em.js");
FS.mkdir("include");
FS.mkdir("include/node");
f={
  "bootstrap.c":"../tests/nodejs/bootstrap.c",
  "binding.c":"../tests/nodejs/binding.c",
  "binding_linux.c":"../tests/nodejs/binding_linux.c",
  "common.h":"../tests/nodejs/common.h",
  "binding.h":"../tests/nodejs/binding.h",
  "include/node/node_api.h":"../tests/nodejs/include/node/node_api.h",
  "include/node/node_api_types.h":"../tests/nodejs/include/node/node_api_types.h"
}
for(i in f){
  FS.writeFile(i, read(f[i]));
};
//args="-c bootstrap.c -I . -I include/node/ -o out.o"
args="-nostdinc -nostdlib -I /usr/include/:/usr/include/i386-linux-gnu/:/tmp/tcc/lib/tcc/include/ -c bootstrap.c -I . -I include/node/ -o out.o"
args=args.split(" ");
print(JSON.stringify(args));
Module.arguments=args;
obj_name="../tests/nodejs/lib/addon.o";
// HACK temp skip testing
//compile(obj_name);

mm={};
ctypes={};
ctypes.voidptr_t=function(){return 0};
libc.mmap=function(){
  print("mmap called");
  return 0;
}
libc.malloc=function(){
  print("malloc called");
  return 0;
}
libc.memcpy=function(){
  return 0;
}
load("../lib/elf_loader.js");

obj=mm.decode_elf(read(obj_name,"binary"));
//print(JSON.stringify(obj.und,null,"  "));

out=new Uint8Array(7168);

header=[
0x4d,0x5a,0x90,0x00,0x03,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0xff,0xff,0x00,0x00,
0xb8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,
0x0e,0x1f,0xba,0x0e,0x00,0xb4,0x09,0xcd,0x21,0xb8,0x01,0x4c,0xcd,0x21,0x54,0x68,
0x69,0x73,0x20,0x70,0x72,0x6f,0x67,0x72,0x61,0x6d,0x20,0x63,0x61,0x6e,0x6e,0x6f,
0x74,0x20,0x62,0x65,0x20,0x72,0x75,0x6e,0x20,0x69,0x6e,0x20,0x44,0x4f,0x53,0x20,
0x6d,0x6f,0x64,0x65,0x2e,0x0d,0x0d,0x0a,0x24,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x50,0x45,0x00,0x00,0x4c,0x01,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0xe0,0x00,0x0e,0x23,0x0b,0x01,0x06,0x00,0x00,0x10,0x00,0x00,
0x00,0x0a,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x1e,0x00,0x00,0x00,0x10,0x00,0x00,
0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x10,0x00,0x00,0x00,0x02,0x00,0x00,
0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x40,0x00,0x00,0x00,0x02,0x00,0x00,0xd1,0xfb,0x00,0x00,0x02,0x00,0x00,0x00,
0x00,0x00,0x10,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x10,0x00,0x00,
0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x26,0x00,0x00,0x5b,0x00,0x00,0x00,
0x00,0x23,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x30,0x00,0x00,0x84,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x23,0x00,0x00,0x68,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2e,0x74,0x65,0x78,0x74,0x00,0x00,0x00,
0x30,0x0f,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x02,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x60,
0x2e,0x64,0x61,0x74,0x61,0x00,0x00,0x00,0x7c,0x06,0x00,0x00,0x00,0x20,0x00,0x00,
0x00,0x08,0x00,0x00,0x00,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x40,0x00,0x00,0xc0,0x2e,0x72,0x65,0x6c,0x6f,0x63,0x00,0x00,
0x84,0x00,0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x1a,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x42,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
];
for(var i=0;i<header.length;i++){
out[i]=header[i];
};

Export_Table = {
  "VirtualAddress": 9728,
  "Size": 91
};
Import_Table = {
  "VirtualAddress": 8960,
  "Size": 80
};
Base_Relocation_Table = {
  "VirtualAddress": 12288,
  "Size":0,
  data: []
};
IAT = {
  "VirtualAddress": 9040,
  "Size": 104
};
Section_Headers = {
  ".text": {
    "Name": ".text",
    "VirtualSize": 3888,
    "VirtualAddress": 4096,
    "SizeOfRawData": 4096,
    "PointerToRawData": 512,
    "PointerToRelocations": 0,
    "PointerToLinenumbers": 0,
    "NumberOfRelocations": 0,
    "NumberOfLinenumbers": 0,
    "Characteristics": 1610612768
  },
  ".data": {
    "Name": ".data",
    "VirtualSize": 1660,
    "VirtualAddress": 8192,
    "SizeOfRawData": 2048,
    "PointerToRawData": 4608,
    "PointerToRelocations": 0,
    "PointerToLinenumbers": 0,
    "NumberOfRelocations": 0,
    "NumberOfLinenumbers": 0,
    "Characteristics": -1073741760
  },
  ".reloc": {
    "Name": ".reloc",
    "VirtualSize": 132,
    "VirtualAddress": 12288,
    "SizeOfRawData": 512,
    "PointerToRawData": 6656,
    "PointerToRelocations": 0,
    "PointerToLinenumbers": 0,
    "NumberOfRelocations": 0,
    "NumberOfLinenumbers": 0,
    "Characteristics": 1107296320
  }
};
ts=Section_Headers[".text"];
ds=Section_Headers[".data"];
rs=Section_Headers[".reloc"];

function f_off(s,a){
  return a-s.VirtualAddress+s.PointerToRawData;
};
function hex(x){
  return "0x"+x.toString(16);
};
et_off=f_off(ds,Export_Table.VirtualAddress);
print("Export_Table f_off: "+hex(et_off));
it_off=f_off(ds,Import_Table.VirtualAddress);
print("Import_Table f_off: "+hex(it_off));
brt_off=f_off(rs,Base_Relocation_Table.VirtualAddress);
print("Base_Relocation_Table f_off: "+hex(brt_off));
iat_off=f_off(ds,IAT.VirtualAddress);
print("IAT f_off: "+hex(iat_off));

fs.writeFileSync("../tests/nodejs/lib/addon_win32.node",out);
