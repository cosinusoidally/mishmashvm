# SPDX-FileCopyrightText: 2020 Jeremiah Orians
# SPDX-FileCopyrightText: 2022 Andrius Å tikonas
#
# SPDX-License-Identifier: GPL-3.0-or-later

# Build with:
# M1 --architecture x86 --little-endian -f x86/Development/kaem-minimal.M1 -o bin/kaem-minimal.hex2
# hex2 --architecture x86 --little-endian --base-address 0x8048000 -f x86/ELF-i386.hex2 -f bin/kaem-minimal.hex2 -o bin/kaem-minimal

DEFINE add_ebx, 83C3
DEFINE add_ecx, 83C1
DEFINE add_ebx,eax 01C3
DEFINE call E8
DEFINE cmp_al, 3C
DEFINE cmp_ebx,ecx 39CB
DEFINE int CD
DEFINE je32 0F84
DEFINE je 74
DEFINE jl 7C
DEFINE jle 7E
DEFINE jmp EB
DEFINE jne 75
DEFINE lea_ecx,[esp] 8D0C24
DEFINE mov_eax, B8
DEFINE mov_ebx, BB
DEFINE mov_ecx, B9
DEFINE mov_eax,ebx 89D8
DEFINE mov_ebp,esp 89E5
DEFINE mov_ebx,eax 89C3
DEFINE mov_ecx,eax 89C1
DEFINE mov_ecx,ebx 89D9
DEFINE mov_edx,ebp 89EA
DEFINE mov_edx,ebx 89DA
DEFINE mov_al,[ebx] 8A03
DEFINE mov_eax,[ebx] 8B03
DEFINE mov_ebx,[ebx] 8B1B
DEFINE mov_[ecx],al 8801
DEFINE mov_[ecx],eax 8901
DEFINE mov_eax,[DWORD] A1
DEFINE mov_ebx,[DWORD] 8B1D
DEFINE mov_[DWORD],eax A3
DEFINE mov_[DWORD],ebx 891D
DEFINE pop_eax 58
DEFINE pop_ebx 5B
DEFINE pop_ecx 59
DEFINE pop_edx 5A
DEFINE push_eax 50
DEFINE push_ebx 53
DEFINE push_ecx 51
DEFINE push_edx 52
DEFINE push 6A
DEFINE ret C3
DEFINE test_eax,eax 85C0
DEFINE test_ebx,ebx 85DB
DEFINE xor_eax,eax 31C0
DEFINE xor_ebx,ebx 31DB
DEFINE xor_ecx,ecx 31C9
DEFINE xor_edx,edx 31D2

# Where the ELF Header is going to hit
# Simply jump to _start
# Our main function
:_start
	pop_eax                           # Get the number of arguments
	pop_ebx                           # Get the program name
	pop_ebx                           # Get the actual input name
	test_ebx,ebx                      # Check for missing output
	jne !_start_out                   # Have real input
	push_eax                          # Need to adjust stack
	mov_ebx, &default_file            # Use "kaem.x86"

:_start_out
	xor_ecx,ecx                       # prepare read_only
	push !5
	pop_eax                           # the syscall number for open()
	int !0x80                         # Now open that damn file

	test_eax,eax                      # IF NULL We couldn't open the file
	jle !Exit_Failure                 # Abort hard
	mov_[DWORD],eax &script           # Set input pointer

	pop_eax                           # Get start of envp
	mov_ebp,esp                       # Protect envp

	push !45
	pop_eax                           # the Syscall # for SYS_BRK
	xor_ebx,ebx                       # Get current brk
	int !0x80                         # Let the kernel do the work
	mov_[DWORD],eax &MALLOC           # Set our malloc pointer

	# Where the main work gets done
	# Using EBX for tokens and ECX for tokens[i]
:main_loop
	mov_eax,[DWORD] &max_args         # Using 256 char* of space
	call %malloc                      # get it
	mov_ebx,eax                       # set tokens

	mov_ecx,ebx                       # I = 0
	xor_eax,eax                       # Using 0
	mov_[DWORD],eax &status           # status = 0
	mov_[DWORD],eax &command_done     # command_done = 0

	# Using EAX for result and EBX for tokens[i]
:collect_command
	call %collect_token               # Get another token
	test_eax,eax                      # if NULL == result
	je !collect_command_comment       # It is a comment, don't store

	mov_[ecx],eax                     # tokens[i] = result
	add_ecx, !4                       # i = i + 1 (adjusted for char* size)

:collect_command_comment
	mov_eax,[DWORD] &command_done     # Using command_done
	test_eax,eax                      # IF 0 == command_done
	je !collect_command               # keep looping

	# Deal with line comments
	cmp_ebx,ecx                       # if 0 < i
	je !main_loop                     # It was a comment

	call %print_command               # print the command
	mov_eax,[ebx]                     # program = tokens[0]
	test_eax,eax                      # IF NULL == program
	je !Exit_Failure                  # Some shit went down, abort

	push_ebx                          # Protect Tokens
	push !2
	pop_eax                           # FORKing
	int !0x80                         # int f = FORK()
	pop_ebx                           # Restore Tokens

	test_eax,eax                      # Check fork
	jl !Exit_Failure                  # IF f == -1 abort hard
	jne !collect_command_parent       # IF f == 0 it is child

	# Deal with child case
	push !11
	pop_eax                           # EXECVE
	mov_edx,ebp                       # third arg = envp
	mov_ecx,ebx                       # second arg = tokens
	mov_ebx,[ebx]                     # program = tokens[0]
	int !0x80                         # execve(program, tokens, envp)
	                                  # return error

# Exit_Failure function
# Receives nothing
# And aborts hard
# Does NOT return
:Exit_Failure
	push !1
	pop_ebx                           # All is wrong
	mov_eax,ebx                       # put the exit syscall number in eax
	int !0x80                         # Call it a bad day

:collect_command_parent
	mov_ebx,eax                       # first arg = f
	mov_ecx, &status                  # second arg = &status
	xor_edx,edx                       # third arg = NULL
	push !7
	pop_eax                           # WAITPID
	int !0x80                         # waitpid(f, &status, 0)

	mov_eax,[DWORD] &status           # Using status
	test_eax,eax                      # IF 0 == status
	je !main_loop                     # Loop forever

	# Deal with very unhappy case
	mov_eax, &hard                    # Using "Subprocess error\nABORTING HARD\n"
	call %File_Print                  # Print it
	jmp !Exit_Failure                 # return error

:Done
	# program completed Successfully
	xor_ebx,ebx                       # All is well
	push !1
	pop_eax                           # put the exit syscall number in eax
	int !0x80                         # Call it a good day

# print_command function
# Receives tokens[j] in EBX and tokens[i] in ECX
# Modifies EAX
:print_command
	push_ebx                          # Protect EBX
	mov_eax, &prefix                  # using " +> "
	call %File_Print                  # print it
:print_command_loop
	mov_eax,[ebx]                     # using tokens[j]
	call %File_Print                  # print it
	add_ebx, !4                       # j = j + 1
	push !32
	pop_eax                           # using ' '
	call %fputc                       # print it
	cmp_ebx,ecx                       # IF j < i
	jne !print_command_loop           # otherwise keep looping

	push !10
	pop_eax                           # using '\n'
	call %fputc                       # print it
	pop_ebx                           # Restore EBX
	ret


# collect_token function
# Receives nothing
# Overwrites EAX
# Uses EAX as C, EBX as token and ECX as token[i]
:collect_token
	push_ebx                          # Protect EBX
	push_ecx                          # Protect ECX
	mov_eax,[DWORD] &max_string       # Using max_string
	call %malloc                      # allocate space
	mov_ebx,eax                       # token = malloc(max_string)
	mov_ecx,eax                       # i = 0; set token[i]

:collect_token_loop
	call %fgetc                       # c = fgetc(input)
	cmp_al, !-4                       # if C == EOF
	je !Done                          # We are done

	cmp_al, !32                       # IF C == ' '
	je !collect_token_done            # Space terminates token

	cmp_al, !9                        # IF C == '\t'
	je !collect_token_done            # tab terminates token

	cmp_al, !10                       # IF C == '\n'
	jne !collect_token_string         # otherwise check next

	# It is a newline
	push !1
	pop_eax                           # Using 1
	mov_[DWORD],eax &command_done     # Set command_done = TRUE
	jmp !collect_token_done           # Be done

:collect_token_string
	cmp_al, !34                       # IF C == '\"'
	jne !collect_token_comment        # otherwise check next

	# It is a RAW STRING
	call %collect_string              # Get the rest of the string
	jmp !collect_token_done           # Be done

:collect_token_comment
	cmp_al, !35                       # IF C == '#'
	jne !collect_token_escape         # otherwise check next

	# It is a line comment
	call %collect_comment             # Read it all
	push !1
	pop_eax                           # Using 1
	mov_[DWORD],eax &command_done     # Set command_done = TRUE
	jmp !collect_token_done           # Be done

:collect_token_escape
	cmp_al, !92                       # IF C == '\\'
	jne !collect_token_other          # otherwise just store it

	# It is an escape char
	call %fgetc                       # Read the char to drop
	jmp !collect_token_done           # Be done

:collect_token_other
	mov_[ecx],al                      # token[i] = C
	add_ecx, !1                       # i = i + 1
	jmp !collect_token_loop           # Keep going

:collect_token_done
	cmp_ebx,ecx                       # IF i == 0
	jne !collect_token_good           # otherwise return the token
	xor_ebx,ebx                       # token = NULL

:collect_token_good
	mov_eax,ebx                       # Return token
	pop_ecx                           # Restore ECX
	pop_ebx                           # Restore EBX
	ret


# collect_string function
# Receives target[index] in ECX
# Modifies EAX
# Uses EAX as C
:collect_string
	call %fgetc                       # C = fgetc(input)
	cmp_al, !-4                       # if C == EOF
	je32 %Exit_Failure                # Something went horribly wrong

	cmp_al, !34                       # IF C == '\"'
	je !collect_string_done           # be done

	# deal with inside of string
	mov_[ecx],al                      # target[index] = C
	add_ecx, !1                       # index = index + 1
	jmp !collect_string               # Keep going

:collect_string_done
	ret


# collect_comment function
# Receives nothing
# Modifies EAX
# uses EAX as Int C
# Just throws away everything it reads
:collect_comment
	call %fgetc                       # C = fgetc(input)
	cmp_al, !-4                       # IF C == EOF
	je32 %Exit_Failure                # abort hard

	cmp_al, !10                       # IF C == '\n'
	jne !collect_comment              # otherwise keep looping
	ret


# Malloc isn't actually required if the program being built fits in the initial memory
# However, it doesn't take much to add it.
# Requires [MALLOC] to be initialized and EAX to have the number of desired bytes
:malloc
	push_ebx                          # Protect EBX
	push_ecx                          # Protect ECX
	push_edx                          # Protect EDX
	mov_ebx,[DWORD] &MALLOC           # Using the current pointer
	add_ebx,eax                       # Request the number of desired bytes
	push !45
	pop_eax                           # the Syscall # for SYS_BRK
	int !0x80                         # call the Kernel
	mov_eax,[DWORD] &MALLOC           # Return pointer
	mov_[DWORD],ebx &MALLOC           # Update pointer
	pop_edx                           # Restore EDX
	pop_ecx                           # Restore ECX
	pop_ebx                           # Restore EBX
	ret


# fgetc function
# Loads FILE* from [script]
# Returns -4 (EOF) or char in AL
:fgetc
	push_ebx                          # Protect EBX
	push_ecx                          # Protect ECX
	push_edx                          # Protect EDX
	push !-4
	pop_eax                           # Put EOF in eax
	push_eax                          # Assume bad (If nothing read, value will remain EOF)
	lea_ecx,[esp]                     # Get stack address
	mov_ebx,[DWORD] &script           # Where are we reading from
	push !3
	pop_eax                           # the syscall number for read
	push !1
	pop_edx                           # set the size of chars we want
	int !0x80                         # call the Kernel
	pop_eax                           # Get either char or EOF
	cmp_al, !-4                       # Check for EOF
:fgetc_done
	pop_edx                           # Restore EDX
	pop_ecx                           # Restore ECX
	pop_ebx                           # Restore EBX
	ret


# File_Print function
# Receives CHAR* in EAX
# calls fputc for every non-null char
:File_Print
	push_ebx                          # Protect EBX
	push_ecx                          # Protect ECX
	mov_ebx,eax                       # Protect S
	test_eax,eax                      # Protect against nulls
	je !File_Print_Done               # Simply don't try to print them
:File_Print_Loop
	xor_eax,eax                       # Zero eax
	mov_al,[ebx]                      # Read byte
	test_eax,eax                      # Check for NULL
	je !File_Print_Done               # Stop at NULL

	call %fputc                       # write it
	add_ebx, !1                       # S = S + 1
	jmp !File_Print_Loop              # Keep going

:File_Print_Done
	pop_ecx                           # Restore ECX
	pop_ebx                           # Restore EBX
	ret


# fputc function
# receives CHAR in EAX and load FILE* from stdout
# writes char and returns
:fputc
	push_ebx                          # Protect EBX
	push_ecx                          # Protect ECX
	push_edx                          # Protect EDX
	push_eax                          # We are writing eax
	lea_ecx,[esp]                     # Get stack address
	push !1
	pop_ebx                           # Write to target file
	push !4
	pop_eax                           # the syscall number for write
	mov_edx,ebx                       # set the size of chars we want
	int !0x80                         # call the Kernel
	pop_eax                           # Restore stack
	pop_edx                           # Restore EDX
	pop_ecx                           # Restore ECX
	pop_ebx                           # Restore EBX
	ret



:default_file "kaem.x86"
:prefix " +> "
:hard "Subprocess error
ABORTING HARD
"
:script %0
:command_done %0
:max_args %1024                           # 256 * sizeof(char*)
:max_string %4096                         # 4096 * sizeof(char)
:MALLOC %0
:status %0

:ELF_end
