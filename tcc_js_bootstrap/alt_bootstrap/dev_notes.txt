--------------------------------------------------------------------------------
2023-04-02

Success, bootstrap_proto17.js and alt_step8.js can now build the whole of
stage0-posix. Performance is currently poor though. Takes hours to run on a mid
range PC. Next steps:

- save stdout and stderr in snapshots
- improve performance
- memory usage was also high (around 1.7GB during the later stage of the
  bootstrap). This is odd as real memory usage is probably much lower than this.
  I should investigate further and reduce if possible.

--------------------------------------------------------------------------------
2023-03-30

Bit of a gap since the last update. I am now on bootstrap_proto15.js and
alt_step6.js . I am now able to run all the way up to:

Phase-6 Build blood-elf-0 from C sources

This means that I have managed to generate the initial M2 C compiler, but I am
not yet able to actually run the compiler (I'm missing some instructions and
addressing modes).

The current version has:

- the ability to snapshot the vm state to disk and reload/resume execution from
  a snapshot. This should make implementing the remaining intructions more
  simple as it currently takes several minutes to generate M2. To save a
  snapshot:

  js -i -e "path='../../../mmaux/snap/';load('bootstrap_proto16.js')"

  (note bootstrap_proto16.js is the next dev version, it has a couple of fixes
  that are needed)

  run cont() a couple of times until you hit an error:

js> cont()
TypeError: modes[mod] is undefined
alt_step/get_mode@/home/ljw/src/mishmashvm/tcc_js_bootstrap/alt_bootstrap/alt_step7.js:185:5
alt_step/decode_modrm@/home/ljw/src/mishmashvm/tcc_js_bootstrap/alt_bootstrap/alt_step7.js:284:5
alt_step/LEA_r32_m@/home/ljw/src/mishmashvm/tcc_js_bootstrap/alt_bootstrap/alt_step7.js:1302:5
alt_step/step@/home/ljw/src/mishmashvm/tcc_js_bootstrap/alt_bootstrap/alt_step7.js:2308:7
new_process/step@/home/ljw/src/mishmashvm/tcc_js_bootstrap/alt_bootstrap/bootstrap_proto16.js:247:1
resume@/home/ljw/src/mishmashvm/tcc_js_bootstrap/alt_bootstrap/bootstrap_proto16.js:2529:7
cont@/home/ljw/src/mishmashvm/tcc_js_bootstrap/alt_bootstrap/alt_step7.js:2361:1
@typein:4:1

error in pid: 3
eax            0x00000000
ecx            0x00000000
edx            0x00000000
ebx            0x00000000
esp            0xffffdea8
ebp            0xffffdea8
esi            0x00000000
edi            0x00000000
eip            0x08048056
eflags        FIXME
0.003

This means the emulator has got as far as it can, and has now failed because of
a missing addressing mode for the LEA instruction.

Make sure the snapshot directory exists otherwise snapshotting will fail and
spidermonkey will crash

To save a snapshot:

save()

You will then see the snapshot files:
ljw@ljw-desktop:~/src/mishmashvm/tcc_js_bootstrap/alt_bootstrap$ ls ../../../mmaux/snap/
data0  data2  data4  file0  file10  file12  file14  file2  file4  file6  file8  meta.json
data1  data3  data5  file1  file11  file13  file15  file3  file5  file7  file9  written.json

meta.json is the state of each process (CPU registers, metadata about each
processes address space, open file descriptors etc).

written.json are the names of each new file that has been generated by the
emulator . The index of this array corresponds with each file* eg file15 is
./x86/artifact/M2

The data* files are dumps of the stack and heap of each process

Note when you save a snap it will wipe out some in memory files. Always reload a
snap before resuming execution.

To load a snapshot:

load_snap()

To resume execution:

cont()

It is also possible to load a snapshot when the emulator starts. This allow you
to avoid having to run the whole bootstrapping process each time the emulator
starts. To load on start:

js -e "path='../../../mmaux/snap/';use_snap=true;load('bootstrap_proto16.js')" -i

This will load the snapshot and drop you into a repl (using the -i flag). You
can then resume execution with cont()

To implement an instruction:

When you hit the error note the value of eip. This is the instruction that has
failed. In the above example eip is 0x08048056 . We then need to run the program
in gdb and compare real/emulated behaviour. To run in gdb we will need the
native artifacts. To generate the native artifacts run ./mk in stage0-posix
(note it is better to copy stage0-posix elsewhere so you don't dirty the git
tree). Once you have your native artifacts you then need the command line of the
process that has failed. In the above example we can see that pid 3 has failed.
We can then pick out the argv from the virtual process:

js> pt[3].argv.join(" ")
"./x86/artifact/M2 --architecture x86 -f ./M2libc/x86/linux/bootstrap.c -f ./M2libc/bootstrappable.c -f ./mescc-tools/stringify.c -f ./mescc-tools/blood-elf.c --bootstrap-mode -o ./x86/artifact/blood-elf-0.M1"

Next run gdb:

stage0$ gdb ./x86/artifact/M2

Then start the program with the correct params:

(gdb) starti  --architecture x86 -f ./M2libc/x86/linux/bootstrap.c -f ./M2libc/bootstrappable.c -f ./mescc-tools/stringify.c -f ./mescc-tools/blood-elf.c --bootstrap-mode -o ./x86/artifact/blood-elf-0.M1
Starting program: /home/ljw/src/bootstrap/stage0/x86/artifact/M2 --architecture x86 -f ./M2libc/x86/linux/bootstrap.c -f ./M2libc/bootstrappable.c -f ./mescc-tools/stringify.c -f ./mescc-tools/blood-elf.c --bootstrap-mode -o ./x86/artifact/blood-elf-0.M1

Program stopped.
0x08048054 in ?? ()

starti will break on the first instruction

Next flip to intel syntax disassembly. This is closer to the assembly syntax
used by the emulator:

(gdb) set disassembly-flavor intel

set a breakpoint on the problematic instruction:

(gdb) break *0x08048056
Breakpoint 1 at 0x8048056

Continue up until the breakpoint:

(gdb) continue
Continuing.

Breakpoint 1, 0x08048056 in ?? ()

disassemble around eip:

(gdb) disassemble /r $eip,+20
Dump of assembler code from 0x8048056 to 0x804806a:
=> 0x08048056:	8d 85 04 00 00 00	lea    eax,[ebp+0x4]
   0x0804805c:	50	push   eax
   0x0804805d:	89 e8	mov    eax,ebp
   0x0804805f:	8b 00	mov    eax,DWORD PTR [eax]
   0x08048061:	81 c0 02 00 00 00	add    eax,0x2
   0x08048067:	c1 e0 02	shl    eax,0x2
End of assembler dump.

Note you can also do $eip-blah to get some context around the instruction, but
in this case that is not too useful as it's the 2nd instruction in the whole
program:

(gdb) disassemble /r $eip-2,+20
Dump of assembler code from 0x8048054 to 0x8048068:
   0x08048054:	89 e5	mov    ebp,esp
=> 0x08048056:	8d 85 04 00 00 00	lea    eax,[ebp+0x4]
   0x0804805c:	50	push   eax
   0x0804805d:	89 e8	mov    eax,ebp
   0x0804805f:	8b 00	mov    eax,DWORD PTR [eax]
   0x08048061:	81 c0 02 00 00 00	add    eax,0x2
   0x08048067:	c1 e0 02	shl    eax,0x2
End of assembler dump.
(gdb)

At this point it is worth checking that the cpu registers match between the
native/emulated executions:

(gdb) info registers
eax            0x0	0
ecx            0x0	0
edx            0x0	0
ebx            0x0	0
esp            0xffffd530	0xffffd530
ebp            0xffffd530	0xffffd530
esi            0x0	0
edi            0x0	0
eip            0x8048056	0x8048056
eflags         0x202	[ IF ]
cs             0x23	35
ss             0x2b	43
ds             0x2b	43
es             0x2b	43
fs             0x0	0
gs             0x0	0

Note there is a bit of a discrepancy here. esp (stack pointer) may differ as the
emulator may place the stack at a slightly different address (I tried to avoid
this as much as possibly but sometimes it is inevitable as envp may differ. We
can see that esp=ebp as expected (due to the mov ebp,esp).

In this case the emulator has managed to correctly decode the instruction, but
it has failed to run it due to a missing address mode. To fix that I will need
to update get_mode to include the missing mode. Once that is done I can reload
the cpu emulator and resume execution with single stepping enabled:

ld(); // this reloades the cpu emulator from disk (alt_step$blah.js)
dbg_on(); // this enables debug mode and single stepping
cont(); // this resumes execution

If the implementation is correct then the above sequence of calls should be
equivalent of running si in gdb:

(gdb) si
0x0804805c in ?? ()
(gdb) disassemble /r $eip-10,+20
Dump of assembler code from 0x8048052 to 0x8048066:
   0x08048052:	00 00	add    BYTE PTR [eax],al
   0x08048054:	89 e5	mov    ebp,esp
   0x08048056:	8d 85 04 00 00 00	lea    eax,[ebp+0x4]
=> 0x0804805c:	50	push   eax
   0x0804805d:	89 e8	mov    eax,ebp
   0x0804805f:	8b 00	mov    eax,DWORD PTR [eax]
   0x08048061:	81 c0 02 00 00 00	add    eax,0x2
End of assembler dump.
(gdb) info registers
eax            0xffffd534	-10956
ecx            0x0	0
edx            0x0	0
ebx            0x0	0
esp            0xffffd530	0xffffd530
ebp            0xffffd530	0xffffd530
esi            0x0	0
edi            0x0	0
eip            0x804805c	0x804805c
eflags         0x202	[ IF ]
cs             0x23	35
ss             0x2b	43
ds             0x2b	43
es             0x2b	43
fs             0x0	0
gs             0x0	0
(gdb)

So after this call we should expect eax=ebp+4 (lea is load effective address, it
computes an address from it's operand in this case ebp+0x4).

Once I am confident that lea is implemented correctly I can do:

dbg_off();cont();

which will resume execution and continue to the next unimplemented/broken
instruction. It's then a case or rinse/repeat until all missing instructions are
implemented.

Next version:

- Implement enough instructions to run M2 to completion.
- Write up a worked example of implementing an instruction. This is useful for
  my reference, but also if anyone else wanted to better understand the codebase

I am also at a bit of a crossroads here. I could continue along the emulation
path, or I could maybe see about running M2 under mishmashvm. In theory I could
relocate/load/run ./x86/artifact/M2-0-0.hex2 and then call it via the jsctypes
ffi. I'd need to eliminate the use of Linux syscalls so I could run it under
win32 too. In reality I think I'll probably end up doing both. I need the
emulation to run under different archs, and I need the native version to get
decent perf on native. I have also been experimenting with JIT compilation under
the emulator (x86 to JS) in order to improve perf (can even be tested out by
setting perf_hack=true to test out a manually ported inner loop, this does speed
up execution of hex2-0 significantly).


--------------------------------------------------------------------------------
2023-02-22

bootstrap_proto7.js is able to get as far as:
Phase-2b Build catm from hex2 :
./x86/artifact/hex2-0 ./x86/catm_x86.hex2 ./x86/artifact/catm

Next steps are a case of grinding through and adding all required instructions
in order to be able to run hex2-0 to completion.

Current version has a vfs implementation and has a working version of waitpid to
allow processes to wake up in response to a child terminating (which is what
allows kaem scripts to continue after a build step completes).

This version also verifies the sha256sums of the intermediate build artifacts to
confirm that the emulated bootstrap is producing identical output to the native
bootstrap.

Next version:

- implement all required instructions to allow hex2-0 to run to completion
- print out error message if build artifact sha256sums do not match (currently
  it just prints out the sha256sum and the end user must confirm they match by
  eye).

--------------------------------------------------------------------------------
2023-02-21

bootstrap_proto6.js has an implementation of execve. Bootstrap process now runs
up until the end of the first invocation of hex0 (3 procs running, 2x execve).
It fails to run further as the waitpid implementation is not yet complete.

For next version:

- more complete virtual filesystem implementation. Current version is just a
  stub. Need to load vfs into ram and also fix up syscall_open to use vfs
  properly.
- fix exit and waitpid so processes in a waitpid call will wake up when the
  process they are watching exits.

--------------------------------------------------------------------------------
2023-02-17

bootstrap_proto5.js is able to run multiple virtual processes created via fork.
The bootstrap process gets as far as spawning a child proc and calling execve.
Next steps for bootstrap_proto6.js are:

- implement execve
- implement an in memory filesystem

Note the current waitpid implementation is incompete. I need to have some way of
waking up the process at the correct time. Currently the process will just go to
sleep forever.

--------------------------------------------------------------------------------
2023-02-16

bootstrap_proto4.js can run kaem up until the point where it calls fork. I now
also have brk implemented to allocate memory from the os.

Next version bootstrap_proto5.js will:

- implement fork. This requires the ability to clone an existing process.
- have the ability to run multiple processes

For fork I will need something like:

foo=proc.get_state();
foo2=kernel.fork_state(foo);
proc2.set_state(foo2);

The fork_state will copy the heap,stack,register,brk value etc but preserve open
file descriptors.

Question: how does stdin, stdout, stderror work with forks? Currently I only
have a crude implementation of stdout (just an array that is pushed to whenever
a byte is written to stdout).

For multiple processes I'm thinking that I have a process_table (say pt) having
a fixed number of preallocated procs (lets say 8 initially). Then the process of
running multiple procs is just cycling through pt and calling the step method.
Something a bit like:

pt=[p1,p2,p3,p4,p5,p6];

for(var i=0;i<pt.length;i++){
  pt[i].step();
};

If a process is stopped for whatever reason (waiting for a syscall, triggered a
syscall, dead, etc) then it simply does nothing when step is called.

Once each process has been stepped then we process the syscalls:

for(var i=0;i<pt.length;i++){
  var p=pt[i];
  if(p.process_state()==="syscall"){
    p.set_state("wait_syscall_result");
    kernel.syscall(p);
  };
};

states will be something along the lines of:
"running"
"syscall"
"syscall_wait_result"
"dead"

When starting a process we would just scan through pt, find a dead process and
then recycle it with set_state()

processes would start off in a "dead" state

--------------------------------------------------------------------------------
2023-02-13

bootstrap_proto2.js is an improved version of bootstrap_proto.js with the same
level of functionality as the original. It has the following properties:

- faster by x100
- optional logging (off by default, which may explain the x100 performance
  boost)
- neater code using nested switch statements
- has the ability to instantiate multiple emulated x86 "processes" each with
  their own memory

Improvements for next version:

- proper filesystem implementation, enough to actually open the correct files
  for reading an writing. Filesystem should be in memory.
- emulate a shared "kernel" that provides OS services to all virtual processes
- proper argc/argv creation on process start.

--------------------------------------------------------------------------------
2023-02-12

bootstrap_proto.js contains a very rough x86 emulator that is capable of loading
and running hex0 (is it also capable of converting hex0 to a binary). This
version can run hex0 to completion and verify the correct hash is generated.
Current issues:

- it's far too slow. It took about 30s to run on my slow machine
- it spits out too much log info whilst it runs. This is possibly one of the
  reasons for the slowness as after each instruction it dumps the decoded
  instruction and the cpu state to standard out.
- some instruction are not 100% correctly implemented
- code is a mess.

Improvements for next version:

- use nested switch statements decode the instructions. This should be cleaner
  than using arrays of functions.
  One thing to note though is that simpler js VMs internally convert switches to
  if else chains, which may be less efficient
- optional debug logging
- fix instruction implementations
- create a way to have multiple cpu memories (emulating the address spaces of
  multiple Linux processes)
- a real elf loader (or at least an incremental improvement)
- properly setting up the stack on process load (argc argv)
- better syscall emulation.

The target for the next version is to be able to run kaem and spawn child
processes (which will be virtualised inside the same js process). Should then be
able to kick off the kaem.x86 script at the root of stage0-posix.
